unique(name) %>%
print
student_info <- students4 %>%
select(id, name, sex)
student_info
unique(student_info, x = "name")
unique(student_info, name)
unique(student_info, name, fromLast = T)
unique(student_info, id, fromLast = T)
unique(student_info, id)
unique(student_info, student_info)
unique(student_info)
submit()
submit()
submit()
submit()
pAssed
PASSED
passed
View(passed)
failed
?mutate
passed <- mutate(passed, status= final == 'A' | finalDefaultMethod()=='B' )
passed <- mutate(passed, status= final == 'A' | final=='B' )
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
packageVersion('dplyr')
?bind_rows
bind_rows(passed, failed)
sat
?separate()
submit()
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(c("part", "sex"))
print
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(c("part", "sex")) %>%
print
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex, c("part", "sex")) %>%
print
submit()
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex, c("part", "sex")) %>%
group_by(part, sex)
mutate(total = sum(count), prop = count/total
) %>% print
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex, c("part", "sex")) %>%
group_by(part, sex) %>%
mutate(total = sum(count), prop = count/total
) %>%
print
submit()
s1 <- seq(1, 10, by=2)
s1
s2 <- seq(1, 10, length = 3)
s2
x <- c(1, 3, 8, 25, 100); seq(along = x)
library(kernlab)
install.packages('kernlab')
library(kernlab)
data(spam)
spam
dim(spam)
?spam
dim(spam)[1]
set.seed(333)
smallSpam <- sample[dim(spam)[1], size=10),]
smallSpam <- spam[sample(dim(spam)[1], size=10),]
smallSpam
spamLabel <- (smallSpam$type=="spam")*1=1
spamLabel <- (smallSpam$type=="spam")*1=1
spamLabel <- (smallSpam$type=="spam")*1+1
spamLabel
plot(smallSpam$capitalAve, col=spamLabel)
smallSpam$capitalAve
install.packages('kernlab')
library(kernlab)
smallSpam <- spam[sample(dim(spam)[1], size=10),]
spamLabel <- (smallSpam$type=="spam")*1+1
plot(smallSpam$capitalAve, col=spamLabel)
install.packages("kernlab")
library(kernlab)
smallSpam <- spam[sample(dim(spam)[1], size=10),]
spamLabel <- (smallSpam$type=="spam")*1+1
plot(smallSpam$capitalAve, col=spamLabel)
plot(smallSpam$capitalAve, col=spamLabel)
smallSpam <- spam[sample(dim(spam)[1], size=10),]
spamLabel <- (smallSpam$type=="spam")*1+1
spamLabel
set.seed(333)
smallSpam <- spam[sample(dim(spam)[1], size=10),]
spamLabel <- (smallSpam$type=="spam")*1+1
plot(smallSpam$capitalAve, col=spamLabel)
prediction[x > 2.7] <- "spam"
rep(NA, length([1,2,3]))
rep(NA, length(smallSpam))
rep?
?
;
?rep
rule1 <- function(x){
prediction <- rep(NA, lenght(x))
prediction[x > 2.7] <- "spam"
prediction[x < 2.4] <- "nonspam"
prediction[x >= 2.4 & x < 2.45] <- "spam"
prediction[x > 2.45 & x <= 2.7] <- "nonspam"
return(prediction)
}
table(rule1(smallSpam$capitalAve), smallSpam$type)
rule1 <- function(x){
prediction <- rep(NA, lenght(x))
prediction[x > 2.7] <- "spam"
prediction[x < 2.4] <- "nonspam"
prediction[x >= 2.4 & x < 2.45] <- "spam"
prediction[x > 2.45 & x <= 2.7] <- "nonspam"
return(prediction)
}
table(rule1(smallSpam$capitalAve), smallSpam$type)
rule1 <- function(x){
prediction <- rep(NA, length(x))
prediction[x > 2.7] <- "spam"
prediction[x < 2.4] <- "nonspam"
prediction[x >= 2.4 & x < 2.45] <- "spam"
prediction[x > 2.45 & x <= 2.7] <- "nonspam"
return(prediction)
}
table(rule1(smallSpam$capitalAve), smallSpam$type)
rule2 <- function(x){
prediction <- rep(NA, length(x))
prediction[x > 2.8] <- "spam"
prediction[x <= 2.8] <- "nonspam"
return(prediction)
}
table(rule2(smallSpam$capitalAve), smallSpam$type)
table?
;
?table
sum(rule2(spam$capitalAve)==spam$type)
sum(rule1(spam$capitalAve)==spam$type)
sum(rule1(spam$capitalAve)==spam$type)
rule1 <- function(x){
prediction <- rep(NA, length(x))
prediction[x > 2.7] <- "spam"
prediction[x < 2.4] <- "nonspam"
prediction[x >= 2.4 & x < 2.45] <- "spam"
prediction[x > 2.45 & x <= 2.7] <- "nonspam"
return(prediction)
}
sum(rule1(spam$capitalAve)==spam$type)
rule1(spam$capitalAve)
rule1(spam$capitalAve)==spam$type
sum(rule1(spam$capitalAve)==spam$type)
install.packages('kernlab');
library('kernlab');
data(spam)
spam$capitalAveSq <- spam$capitalAve^2
library('ISLR')
library('caret')
data(Wage)
inTrain <- createDataPartition(y=Wage$wage, p=0.7, list=FALSE)
training <- Wage[inTrain,]; testing <- Wage[-inTrain,]
table(training$jobclass)
dummies <- dummyVars(wage ~ jobclass, data=training)
head(predict(dummies, newdata=training))
nsv <- nearZeroVar(training, saveMetrics=TRUE)
nsv
library(splines)
bsBasis <- bs(training$age, df=3)
bsBasis
lm1 <- lm(wage ~ bsBasis, data=training)
plot(training$age, training$wage, pch=19, cex=0.5)
plot(training$age, training$wage, pch=19, cex=15)
plot(training$age, training$wage, pch=19, cex=0.1)
plot(training$age, training$wage, pch=1, cex=0.1)
plot(training$age, training$wage, pch=19, cex=0.1)
predict(bsBasis, age=testing$age)
data(spam)
inTrain <- createDataPartition(y=spam$type, p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
M <- abs(cor(training[,-58]))
diag(M) <- 0
which(M>0.8, arr.ind=T)
M
?cor
smallSpam <- spam[,c(34, 32)]
prComp <- prcomp(smallSpam)
plot(prComp$x[,1], prComp$x[,2])
typeColor <- ((spam$type=="spam")*1 + 1)
typeColor
prComp <- prcomp(log10(spam[,-58]+1))
plot(prComp$x[,1], prComp$x[,2], col=typeColor, xlab="PC1", ylab="PC2")
preProc <- preProcess(log10(spam[, -58]+1, method="pca", pcaComp=2))
spamPC <- predict(preProc, log10(spam[,-58]+1))
plot(spamPC[,1], spamPC[,2], col=typeColor)
#same with caret
preProc <- preProcess(log10(spam[, -58]+1), method="pca", pcaComp=2)
spamPC <- predict(preProc, log10(spam[,-58]+1))
plot(spamPC[,1], spamPC[,2], col=typeColor)
preProc <- preProcess(log10(training[, -58]+1), method="pca", pcaComp=2)
trainPC <- predict(preProc, log10(training[,-58]+1))
modelFit <- train(training$type ~ ., method="glm", data=trainPC)
modelFit
modelFit <- train(training$type ~ ., method="glm", data=training)
modelFit
testPC <- predict(preProc, log10(testing[,-58]+1))
confusionMatrix(testing$type, predict(modelFit, testPC))
testPC
testPC$PC1
confusionMatrix(testing$type, predict(modelFit, testPC))
modelFit <- train(training$type ~ ., method="glm", data=trainPC)
testPC <- predict(preProc, log10(testing[,-58]+1))
confusionMatrix(testing$type, predict(modelFit, testPC))
library(caret)
data("faithful")
set.seed(333)
inTrain <- createDataPartition(y=faithful$waiting, p=0.5, list=FALSE)
table(faithful)
summary(faithful)
head(faithful)
set.seed(333)
inTrain <- createDataPartition(y=faithful$waiting, p=0.5, list=FALSE)
trainFaith <- faithful[inTrain,]; testFaith <- faithful[-inTrain,]
head(trainFaith)
plot(x = trainFaith$waiting, y = trainFaith$eruptions)
plot(x = trainFaith$waiting, y = trainFaith$eruptions, col="blue", xlab="Waiting", ylab="Erruptions")
plot(x = trainFaith$waiting, y = trainFaith$eruptions, col="blue", xlab="Waiting", ylab="Erruptions", pch=19)
lm1 <- lm(erruptions ~ waiting, data=trainFaith)
summary(lm1)
lm1 <- lm(erruptions ~ waiting, data=trainFaith)
lm1 <- lm(eruptions ~ waiting, data=trainFaith)
summary(lm1)
lines(trainFaith, lm1$fitted, lwd=3)
lines(trainFaith$waiting, lm1$fitted, lwd=3)
coef(lm1)[1]+coef(lm1)[2]*80
newData <- data.frame(waiting=80)
predict(lm1, newData)
par(mfrow=c(1,2))
plot(trainFaith$waiting, trainFaith$eruptions, pch=19, col="blue", xlab="Waiting", ylab="Duration")
lines(trainFaith$waiting, predict(lm1), lwd=3)
par(mfrow=c(1,2))
plot(trainFaith$waiting, trainFaith$eruptions, pch=19, col="blue", xlab="Waiting", ylab="Duration")
lines(trainFaith$waiting, predict(lm1), lwd=3)
plot(testFaith$waiting, testFaith$eruptions, pch=19, col="blue", xlab="Waiting", ylab="Duration")
lines(testFaith$waiting, predict(lm1), lwd=3)
lines(testFaith$waiting, predict(lm1, newdata=testFaith), lwd=3)
sqrt(sum((lm1$fitted-trainFaith$eruptions)^2))
sqrt(sum(predict(lm1, newdata=testFaith) - testFaith$eruptions)^2))
sqrt(sum((predict(lm1, newdata=testFaith) - testFaith$eruptions)^2))
pred1 <- predict(lm1, newdata=testFaith, interval="prediction")
pred1 <- predict(lm1, newdata=testFaith, interval="prediction")
ord <- order(testFaith$waiting)
plot(testFaith$eruptions, testFaith$waiting, pch=19, color="blue")
matlines(testFaith$waiting[ord], pred1[ord,], type="l", , col=c(1, 2, 2), lty=c(1, 1, 1), lwd=3)
plot(testFaith$waiting, testFaith$eruptions, pch=19, color="blue")
matlines(testFaith$waiting[ord], pred1[ord,], type="l", , col=c(1, 2, 2), lty=c(1, 1, 1), lwd=3)
modFit <- train(eruptions ~ waiting, data=trainFaith, method="lm")
summary(modFit$finalModel)
library(ISLR);library(ggplot2);library(caret)
data(Wage); Wage<-subset(Wage, select=c(logwage))
summary(Wage)
library(ISLR);library(ggplot2);library(caret)
data(Wage); Wage<-subset(Wage, select=-c(logwage))
summary(Wage)
inTrain <- createDataPartition(Wage$wage, p=0.7, list = FALSE)
training <- Wage[inTrain,];testing <- Wage[-inTrain,]
dim(training);dim(testing)
featurePlot(x=training[, c("age", "education", "jobclass")], y=training$wage, plot="pairs")
qplot(age, wage, data=training)
qplot(age, wage, data=training, colour=jobclass)
qplot(age, wage, data=training, colour=education)
modFit <- train(wage ~ age + jobclass + education, method="lm", data=training)
finMod <- modFit$finalModel
print(finMod)
print(modFit)
print(modFit)
plot(finMod, 1, pch=19, cex=0.5, col="#0000010")
plot(finMod, 1, pch=19, cex=0.5, col="#00000010")
qplot(finMod$fitted, finMod$residuals, colour=race, data=training)
plot(finMod$residuals, pch=19)
plot(finMod$residuals, pch=1)
pred <- predict(modFit, testing)
qplot(wage, pred, colour=year, data=testing)
modFitAll <- train(wage ~ ., data=training, method="lm")
pred <- predict(modFitAll, testing)
qplot(wage, pred, data=testing)
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
data.frame(diagnosis, predictors)
df2 <- data.frame(diagnosis, predictors)
df <-data.frame(diagnosis)
df
head(df)
head(df2)
trainIndex = createDataPartition(diagnosis, p=0.5, list=FALSE)
training <- df2[trainIndex,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
plot(mixtures$CompressiveStrength, pch=19)
qplot(CompressiveStrength, data=mixtures, pch=19)
library(Hmisc)
?cut2
qplot(CompressiveStrength, data=mixtures, pch=19, colour=Age)
qplot(xlim=cut2(CompressiveStrength), data=mixtures, pch=19, colour=Age)
cut2(CompressiveStrength)
comStrength <- cut2(CompressiveStrength)
comStrength <- cut2(mixtures$CompressiveStrength)
comStrength
qplot(xlim=comStrength, data=mixtures, pch=19, colour=Age)
qplot(CompressiveStrength, xlim=comStrength, data=mixtures, pch=19, colour=Age)
qplot(CompressiveStrength, xlim=comStrength, data=mixtures, pch=19)
qplot(CompressiveStrength, data=mixtures, pch=19, colour=Age)
qplot(comStrength, data=mixtures, pch=19, colour=Age)
qplot(CompressiveStrength, xlim=comStrength, data=mixtures, pch=19, colour=Age)
comStrength <- cut2(mixtures$CompressiveStrength, g = 2)
qplot(CompressiveStrength, xlim=comStrength, data=mixtures, pch=19, colour=Age)
comStrength <- cut2(mixtures$CompressiveStrength)
head(comStrength)
quantile(comStrength)
mixtures$CompressiveStrengthCut <- comStrength
qplot(CompressiveStrengthCut, data=mixtures, pch=19, colour=Age)
mixtures$CompressiveStrengthCut
?cut2
?qplot
qplot(CompressiveStrengthCut, data=mixtures, pch=19, colour=Age)
qplot(CompressiveStrength, data=mixtures, pch=19, colour=Age)
qplot(CompressiveStrength, data=mixtures, pch=19, colour=Age, xlim=10)
qplot(CompressiveStrength, data=mixtures, pch=19, colour=Age, xlim=2)
qplot(CompressiveStrength, data=mixtures, pch=19, colour=Age, xlim=2, ylim = 2)
qplot(CompressiveStrength, data=mixtures, pch=19, colour=Age)
qplot(Wage, data=mixtures, pch=19, colour=Age)
qplot(race, data=mixtures, pch=19, colour=Age)
mixtures$CompressiveStrength
mixtures$FlyAsh
summary(mixtures)
qplot(CompressiveStrength, data=training, pch=19, colour=Age)
qplot(CompressiveStrength, Agem data=training, pch=19, colour=Age)
qplot(CompressiveStrength, Age, data=training, pch=19, colour=Age)
qplot(Age, Age, data=training, pch=19, colour=Age)
qplot(Age, Age, data=training, pch=19)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
qplot(CompressiveStrength, data=training)
plot(training$CompressiveStrength, pch=19)
plot(training$CompressiveStrength, pch=19, colour="blue")
qplot(CompressiveStrength, data=training)
plot(training$CompressiveStrength, pch=19, colours="blue")
plot(training$CompressiveStrength, pch=19, colours=c("blue"))
?plot
?qplot
qplot(CompressiveStrength, data=training)
plot(training$CompressiveStrength, pch=19, colours=c("blue"))
plot(training$CompressiveStrength, pch=19
plot(training$CompressiveStrength, pch=19
featurePlot(x=training[, c("Cement", "Water", "FlyAsh", "Age")], y=training$CompressiveStrength, plot="pairs")
training
head(training)
plot(training$CompressiveStrength, pch=19)
featurePlot(x=training[, c("Cement", "Water", "FlyAsh", "Age")], y=training$CompressiveStrength, plot="pairs")
training$Age
training$Age>200
qplot(CompressiveStrength, data=training)
plot(CompressiveStrength, data=training)
plot(mixtures$CompressiveStrength)
plot(mixtures$CompressiveStrength, col="age")
plot(mixtures$CompressiveStrength, col="blue")
plot(mixtures$CompressiveStrength, col=mixtures$Age)
plot(mixtures$CompressiveStrength, col=mixtures$FlyAsh)
plot(mixtures$CompressiveStrength, col=mixtures$FlyAsh)
plot(mixtures$CompressiveStrength, col=mixtures$FlyAsh*2)
plot(mixtures$CompressiveStrength, col=mixtures$FlyAsh*1000)
plot(mixtures$CompressiveStrength, col=mixtures$FlyAsh*100000)
plot(mixtures$CompressiveStrength, col=mixtures$FlyAsh*10000000000000000)
plot(mixtures$CompressiveStrength, col=mixtures$FlyAsh*100000000000)
plot(mixtures$CompressiveStrength, col=mixtures$FlyAsh*100000)
plot(mixtures$CompressiveStrength, col=mixtures$FlyAsh*1000000)
plot(mixtures$CompressiveStrength, col=mixtures$FlyAsh*10000000)
plot(mixtures$CompressiveStrength, col=mixtures$Age)
plot(mixtures$CompressiveStrength, col=mixtures$Cement)
plot(mixtures$CompressiveStrength, col=mixtures$BlastFurnaceSlag)
plot(mixtures$CompressiveStrength, col=mixtures$BlastFurnaceSlag*1+1)
plot(mixtures$CompressiveStrength)
plot(mixtures$CompressiveStrength, col=mixtures$Age)
plot(mixtures$CompressiveStrength, col=mixtures$BlastFurnaceSlag*1+1)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$SuperPlasticizer, main="", xlab="super plasticizer")
training$SuperPlasticizer
training$Superplasticizer
hist(training$Superplasticizer, main="", xlab="super plasticizer")
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433);data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433);data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]];training = adData[ inTrain,]
testing = adData[-inTrain,]
training[c("IL_6"),]
training[,c("IL_6")]
tr<-training[,grepl( "IL_" , names( training ) ) ]
tr
head(tr)
tr<-training[,grepl( "IL_" , names( training ) ) ][, -c(TRAIL_R3)]
tr<-training[,grepl( "IL_" , names( training ) ) ][, -c("TRAIL_R3")]
tr<-training[,grepl( "IL_" , names( training ) ) ]
tr[, -c("TRAIL_R3")]
tr[, c("TRAIL_R3")]
tr[, c(-"TRAIL_R3")]
tr[, -c("TRAIL_R3")]
tr[c("TRAIL_R3"),]
tr<-training[,grepl( "IL_" , names( training ) ) ]
tr
head(tr)
tr[, !c("TRAIL_R3")]
tr <- training[,grepl( "IL_" , names( training ) ) ]
tr <- tr[, !names(tr) %in% c("TRAIL_R3")]
head(tr)
columns <- grepl( "IL_" , names( training ) )
ccolumns
columns
columns <- grepl( "IL_" , names( training ) ) or grepl( "diagnosis" , names( training ) )
columns <- grepl( "IL_" , names( training ) ) + grepl( "diagnosis" , names( training ) )
columns
columns <- grepl( "IL_" , names( training ) ) * grepl( "diagnosis" , names( training ) )
columns
columns <- grepl( "IL_" , names( training ) ) + grepl( "diagnosis" , names( training ) )
tr<-training[, columns]
tr
head(tr)
columns <- grepl( "IL_" , names( training ) ) + grepl( "diagnosis" , names( training ) )
columns
training[, columns]
head(training[, columns])
columns <- data.frame(training[,grepl( "IL_" , names( training ) )])
head(columns)
columns <- data.frame(training[,grepl( "IL_" , names( training ) ), 0])
head(columns)
predName <- names(training)
(ILpredictor <- predName[substr(predName, 1, 2) == "IL"])
ProcPCA <- preProcess(training[, ILpredictor], method = "pca", thresh = .9)
ProcPCA$numComp
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433);data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]];training = adData[ inTrain,]
testing = adData[-inTrain,]
trainingIL <- training[, c(ILpredictor, "diagnosis")]
testingIL <- testing[, c(ILpredictor, "diagnosis")]
ModelAll <- train(diagnosis ~ ., data = trainingIL, method = "glm")
confusionMatrix(testingIL$diagnosis, predict(ModelAll, testingIL))
preProc <- preProcess(training[, ILpredictor], method = "pca", thresh = .8)
trainPC <- predict(preProc, training[, ILpredictor])
ModelPCA <- train(trainingIL$diagnosis ~ ., method = "glm", data = trainPC)
testPC <- predict(preProc, testing[, ILpredictor])
confusionMatrix(testingIL$diagnosis, predict(ModelPCA, testPC))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
predName <- names(training)
(ILpredictor <- predName[substr(predName, 1, 2) == "IL"])
ProcPCA <- preProcess(training[, ILpredictor], method = "pca", thresh = .8)
ProcPCA$numComp
