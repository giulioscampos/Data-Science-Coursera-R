summarize(by_package, count=n(), unique = n_distinct(x = p_id))
summarize(by_package, count=n(), unique = n_distinct(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count>579)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted = arrange(top_counts, desc(count))
top_counts_sorted = arrange(top_counts, desc(count))
?desc
?arrange
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
filter(pack_sum, unique>465)
top_unique <-filter(pack_sum, unique>465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(data, sex_class, count, -grade)
res <- gather(data, sex_class, count)
res <- gather(data, "sex_class", count)
res <- gather(students2, sex_class, count)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, into = c("sex", "class"))
submit()
students3
?gather
students3 %>%
gather(class, class1:class5 , na.rm = TRUE) %>%
print
students3 %>%
gather(class1:class5, class, class1:class5 , na.rm = TRUE) %>%
print
gather(students3, class, class1:class5, na.rm = T)
gather(students3, class1:class5, class, na.rm = T)
gather(students3, class1, class, na.rm = T)
gather(students3, class1:class5, class, na.rm = T)
gather(students3, class1:class5, class, -grade, na.rm = T)
gather(students3, c(class1:class5), class, -grade, na.rm = T)
gather(students3, c(class1:class5), class, na.rm = T)
gather(students3, class1:class5, c(class), na.rm = T)
gather(students3, class, class1:class5, na.rm = T)
gather(students3, class, class, class1:class5, na.rm = T)
submit()
students3
sumbit()
sumbmit()
submit()
?spread
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test ,midterm ) %>%
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test ,grade ) %>%
print
submit()
extract_numeric("class5")
reset()
extract_numeric("class5")
submit()
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
mutate(class, extract_numeric(class))
### Call to mutate() goes here %>%
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
mutate(extract_numeric(class), class)
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
mutate(class, extract_numeric(class)) %>%
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
mutate(class2, extract_numeric(class)) %>%
print
?mutate
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
mutate(class = extract_numeric(class)) %>%
print
submit()
students4
submit()
submit()
student_info <- students4 %>%
select(id, name, sex) %>%
unique(name) %>%
print
?unique
student_info <- students4 %>%
select(id, name, sex) %>%
unique(id) %>%
print
student_info <- students4 %>%
select(id, name, sex) %>%
unique(id, incomparables = F) %>%
print
students4
students4 %>%
select(id, name, sex)
student_info <- students4 %>%
select(id, name, sex) %>%
unique(student_info) %>%
print
student_info <- students4 %>%
select(id, name, sex) %>%
unique(name) %>%
print
student_info <- students4 %>%
select(id, name, sex)
student_info
unique(student_info, x = "name")
unique(student_info, name)
unique(student_info, name, fromLast = T)
unique(student_info, id, fromLast = T)
unique(student_info, id)
unique(student_info, student_info)
unique(student_info)
submit()
submit()
submit()
submit()
pAssed
PASSED
passed
View(passed)
failed
?mutate
passed <- mutate(passed, status= final == 'A' | finalDefaultMethod()=='B' )
passed <- mutate(passed, status= final == 'A' | final=='B' )
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
packageVersion('dplyr')
?bind_rows
bind_rows(passed, failed)
sat
?separate()
submit()
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(c("part", "sex"))
print
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(c("part", "sex")) %>%
print
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex, c("part", "sex")) %>%
print
submit()
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex, c("part", "sex")) %>%
group_by(part, sex)
mutate(total = sum(count), prop = count/total
) %>% print
sat %>%
select(-contains("total")) %>%
gather(part_sex, count, -score_range) %>%
separate(part_sex, c("part", "sex")) %>%
group_by(part, sex) %>%
mutate(total = sum(count), prop = count/total
) %>%
print
submit()
s1 <- seq(1, 10, by=2)
s1
s2 <- seq(1, 10, length = 3)
s2
x <- c(1, 3, 8, 25, 100); seq(along = x)
setwd("C:/Users/johnecon/Projects/datasciencecoursera/Getting and Cleaning Data/Project")
# http://archive.ics.uci.edu/ml/datasets/Human+Activity+Recognition+Using+Smartphones
# This script
# 1) Merges the training and the test sets to create one data set.
# 2) Extracts only the measurements on the mean and standard deviation for each measurement.
# 3) Uses descriptive activity names to name the activities in the data set
# 4) Appropriately labels the data set with descriptive variable names.
# 5) From the data set in step 4, creates a second, independent tidy data set with the average of
# each variable for each activity and each subject.
# Read files
test_labels <- read.table("./data/test/y_test.txt", col.names = c("label"))
train_labels <- read.table("./data/train/y_train.txt", col.names = c("label"))
activities <- read.table("./data/activity_labels.txt", col.names = c("label", "name"))
train_subject <- read.table("./data/train/subject_train.txt", col.names = c("subject"))
test_subject <- read.table("./data/test/subject_test.txt", col.names = c("subject"))
test <- read.table("./data/test/X_test.txt")
train <- read.table("./data/train/X_train.txt")
features <- read.table("./data/features.txt")
# Introduce activity names into labels
test_labels <- test_labels %>%
merge(activities, by.x = "label", by.y = "label")
train_labels <- train_labels %>%
merge(activities, by.x = "label", by.y = "label")
# 1) Merge train and test datasets
merged_data <- rbind(train, test)
merged_labels <- rbind(train_labels, test_labels)
merged_subjects <- rbind(train_subject, test_subject)
# Regex escape parenthesis()
filtered_features <- features[grep("mean\\(\\)|std\\(\\)", features$V2), ]
features_of_interest <- grep("mean\\(\\)|std\\(\\)", features$V2)
# Extracted data
merged_data <- merged_data[, features_of_interest]
# Rename header
library(stringr)
names(merged_data) <- str_replace_all(filtered_features$V2, "\\(\\)", "") %>%
str_replace_all("mean", "Mean") %>%
str_replace_all("std", "Std") %>%
str_replace_all("-", "")
# http://archive.ics.uci.edu/ml/datasets/Human+Activity+Recognition+Using+Smartphones
# This script
# 1) Merges the training and the test sets to create one data set.
# 2) Extracts only the measurements on the mean and standard deviation for each measurement.
# 3) Uses descriptive activity names to name the activities in the data set
# 4) Appropriately labels the data set with descriptive variable names.
# 5) From the data set in step 4, creates a second, independent tidy data set with the average of
# each variable for each activity and each subject.
# Read files
test_labels <- read.table("./data/test/y_test.txt", col.names = c("label"))
train_labels <- read.table("./data/train/y_train.txt", col.names = c("label"))
activities <- read.table("./data/activity_labels.txt", col.names = c("label", "name"))
train_subject <- read.table("./data/train/subject_train.txt", col.names = c("subject"))
test_subject <- read.table("./data/test/subject_test.txt", col.names = c("subject"))
test <- read.table("./data/test/X_test.txt")
train <- read.table("./data/train/X_train.txt")
features <- read.table("./data/features.txt")
# Introduce activity names into labels
test_labels <- test_labels %>%
merge(activities, by.x = "label", by.y = "label")
train_labels <- train_labels %>%
merge(activities, by.x = "label", by.y = "label")
# 1) Merge train and test datasets
merged_data <- rbind(train, test)
merged_labels <- rbind(train_labels, test_labels)
merged_subjects <- rbind(train_subject, test_subject)
# Regex escape parenthesis()
filtered_features <- features[grep("mean\\(\\)|std\\(\\)", features$V2), ]
features_of_interest <- grep("mean\\(\\)|std\\(\\)", features$V2)
# Extracted data
merged_data <- merged_data[, features_of_interest]
# Rename header
library(stringr)
names(merged_data) <- str_replace_all(filtered_features$V2, "\\(\\)", "") %>%
str_replace_all("mean", "Mean") %>%
str_replace_all("std", "Std") %>%
str_replace_all("-", "")
library(dplyr)
head(merged_data)
dim(merged_data)
dim(activities)
names(merged_data)
merged_labels
head(merged_labels)
train_labels
head(train_labels)
dim(merged_labels)
dim(merged_data)
merged_data %>% mutate(labelName = merged_labels$name)
merged_data_with_labels <- merged_data %>% mutate(labelName = merged_labels$name)
merged_data_with_labels$labelName
head(merged_data_with_labels$labelName)
merged_data_with_labels <- merged_data %>% mutate(activity = merged_labels$name)
head(merged_data_with_labels$activity)
names(merged_data_with_labels)
# http://archive.ics.uci.edu/ml/datasets/Human+Activity+Recognition+Using+Smartphones
# This script
# 1) Merges the training and the test sets to create one data set.
# 2) Extracts only the measurements on the mean and standard deviation for each measurement.
# 3) Uses descriptive activity names to name the activities in the data set
# 4) Appropriately labels the data set with descriptive variable names.
# 5) From the data set in step 4, creates a second, independent tidy data set with the average of
# each variable for each activity and each subject.
# Read files
test_labels <- read.table("./data/test/y_test.txt", col.names = c("label"))
train_labels <- read.table("./data/train/y_train.txt", col.names = c("label"))
activities <- read.table("./data/activity_labels.txt", col.names = c("label", "name"))
train_subject <- read.table("./data/train/subject_train.txt", col.names = c("subject"))
test_subject <- read.table("./data/test/subject_test.txt", col.names = c("subject"))
test <- read.table("./data/test/X_test.txt")
train <- read.table("./data/train/X_train.txt")
features <- read.table("./data/features.txt")
library(dplyr)
# Introduce activity names into labels
test_labels <- test_labels %>%
merge(activities, by.x = "label", by.y = "label")
train_labels <- train_labels %>%
merge(activities, by.x = "label", by.y = "label")
# 1) Merges the training and the test sets to create one data set.
merged_data <- rbind(train, test)
merged_labels <- rbind(train_labels, test_labels)
merged_subjects <- rbind(train_subject, test_subject)
# 2) Extracts only the measurements on the mean and standard deviation for each measurement.
# Regex escape parenthesis()
features_of_interest <- grep("mean\\(\\)|std\\(\\)", features$V2)
# Extracted data
merged_data <- merged_data[, features_of_interest]
# 3) Uses descriptive activity names to name the activities in the data set
dim(merged_data)
dim(merged_labels)
merged_data_with_labels <- merged_data %>% mutate(activity = merged_labels$name)
# 4) Appropriately labels the data set with descriptive variable names
# Rename header
filtered_features <- features[features_of_interest, ]
library(stringr)
names(merged_data_with_labels) <- str_replace_all(filtered_features$V2, "\\(\\)", "") %>%
str_replace_all("mean", "Mean") %>%
str_replace_all("std", "Std") %>%
str_replace_all("-", "")
names(merged_data_with_labels)
names(merged_data_with_labels)[66]
names(merged_data_with_labels)[67]
names(merged_data_with_labels)[68]
merged_data_with_labels[67]
rbind(filtered_features$V2, "activity")
cbind(filtered_features$V2, "activity")
a<-cbind(filtered_features$V2, "activity")
head(a)
a
filtered_features
filtered_features$V2
c(filtered_features$V2, "activity")
merged_data_with_labels <- merged_data %>% mutate(activity = merged_labels$name)
filtered_features <- features[features_of_interest, ]
names(merged_data_with_labels) <- names(merged_data_with_labels) %>% str_replace_all(, "\\(\\)", "") %>%
str_replace_all("mean", "Mean") %>%
str_replace_all("std", "Std") %>%
str_replace_all("-", "")
filtered_features <- features[features_of_interest, ]
names(merged_data_with_labels) <- names(merged_data_with_labels) %>% str_replace_all("\\(\\)", "") %>%
str_replace_all("mean", "Mean") %>%
str_replace_all("std", "Std") %>%
str_replace_all("-", "")
# http://archive.ics.uci.edu/ml/datasets/Human+Activity+Recognition+Using+Smartphones
# This script
# 1) Merges the training and the test sets to create one data set.
# 2) Extracts only the measurements on the mean and standard deviation for each measurement.
# 3) Uses descriptive activity names to name the activities in the data set
# 4) Appropriately labels the data set with descriptive variable names.
# 5) From the data set in step 4, creates a second, independent tidy data set with the average of
# each variable for each activity and each subject.
# Importing needed libraries
library(dplyr)
library(stringr)
# Reading files
test_labels <- read.table("./data/test/y_test.txt", col.names = c("label"))
train_labels <- read.table("./data/train/y_train.txt", col.names = c("label"))
activities <- read.table("./data/activity_labels.txt", col.names = c("label", "name"))
train_subject <- read.table("./data/train/subject_train.txt", col.names = c("subject"))
test_subject <- read.table("./data/test/subject_test.txt", col.names = c("subject"))
test <- read.table("./data/test/X_test.txt")
train <- read.table("./data/train/X_train.txt")
features <- read.table("./data/features.txt")
# Introducing activity names into labels
test_labels <- test_labels %>%
merge(activities, by.x = "label", by.y = "label")
train_labels <- train_labels %>%
merge(activities, by.x = "label", by.y = "label")
# 1) Merges the training and the test sets to create one data set.
merged_data <- rbind(train, test)
merged_labels <- rbind(train_labels, test_labels)
merged_subjects <- rbind(train_subject, test_subject)
# 2) Extracts only the measurements on the mean and standard deviation for each measurement.
# Regex escape parenthesis()
features_of_interest <- grep("mean\\(\\)|std\\(\\)", features$V2)
# Extracted data
merged_data <- merged_data[, features_of_interest]
# 3) Uses descriptive activity names to name the activities in the data set
merged_data_with_labels <- merged_data %>% mutate(activity = merged_labels$name)
# 4) Appropriately labels the data set with descriptive variable names
# Rename header
filtered_features <- features[features_of_interest, ]
names(merged_data_with_labels) <- names(merged_data_with_labels) %>% str_replace_all("\\(\\)", "") %>%
str_replace_all("mean", "Mean") %>%
str_replace_all("std", "Std") %>%
str_replace_all("-", "")
# 5) From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
names(merged_data_with_labels)
merged_data <- merged_data[, features_of_interest]
names(merged_data) <- filtered_features %>% str_replace_all("\\(\\)", "")
features_of_interest <- grep("mean\\(\\)|std\\(\\)", features$V2)
filtered_features <- features[features_of_interest, ]
merged_data <- merged_data[, features_of_interest]
names(merged_data) <- filtered_features %>% str_replace_all("\\(\\)", "")
merged_data <- merged_data[, features_of_interest]
names(merged_data) <- filtered_features %>% str_replace_all("\\(\\)", "")
# http://archive.ics.uci.edu/ml/datasets/Human+Activity+Recognition+Using+Smartphones
# This script
# 1) Merges the training and the test sets to create one data set.
# 2) Extracts only the measurements on the mean and standard deviation for each measurement.
# 3) Uses descriptive activity names to name the activities in the data set
# 4) Appropriately labels the data set with descriptive variable names.
# 5) From the data set in step 4, creates a second, independent tidy data set with the average of
# each variable for each activity and each subject.
# Importing needed libraries
library(dplyr)
library(stringr)
# Reading files
test_labels <- read.table("./data/test/y_test.txt", col.names = c("label"))
train_labels <- read.table("./data/train/y_train.txt", col.names = c("label"))
activities <- read.table("./data/activity_labels.txt", col.names = c("label", "name"))
train_subject <- read.table("./data/train/subject_train.txt", col.names = c("subject"))
test_subject <- read.table("./data/test/subject_test.txt", col.names = c("subject"))
test <- read.table("./data/test/X_test.txt")
train <- read.table("./data/train/X_train.txt")
features <- read.table("./data/features.txt")
# Introducing activity names into labels
test_labels <- test_labels %>%
merge(activities, by.x = "label", by.y = "label")
train_labels <- train_labels %>%
merge(activities, by.x = "label", by.y = "label")
# 1) Merges the training and the test sets to create one data set.
merged_data <- rbind(train, test)
merged_labels <- rbind(train_labels, test_labels)
merged_subjects <- rbind(train_subject, test_subject)
features_of_interest <- grep("mean\\(\\)|std\\(\\)", features$V2)
filtered_features <- features[features_of_interest, ]
# Extracted data
merged_data <- merged_data[, features_of_interest]
names(merged_data) <- filtered_features %>% str_replace_all("\\(\\)", "")
merged_data_with_labels <- merged_data %>% mutate(activity = merged_labels$name)
merged_data_with_activities <- merged_data %>% mutate(activity = merged_labels$name)
names(merged_data)
names(merged_data) <- filtered_features$V2 %>% str_replace_all("\\(\\)", "")
merged_data_with_activities <- merged_data %>% mutate(activity = merged_labels$name)
names(merged_data_with_labels) <- names(merged_data_with_labels) %>% str_replace_all("\\(\\)", "") %>%
str_replace_all("mean", "Mean") %>%
str_replace_all("std", "Std") %>%
str_replace_all("-", "")
# 4) Appropriately labels the data set with descriptive variable names
# Rename header
names(merged_data_with_labels) <- names(merged_data_with_activities) %>% str_replace_all("\\(\\)", "") %>%
str_replace_all("mean", "Mean") %>%
str_replace_all("std", "Std") %>%
str_replace_all("-", "")
names(merged_data_with_activities) <- names(merged_data_with_activities) %>% str_replace_all("\\(\\)", "") %>%
str_replace_all("mean", "Mean") %>%
str_replace_all("std", "Std") %>%
str_replace_all("-", "")
names(merged_data_with_activities)
merged_subjects
names(merged_subjects)
dim(merged_subjects)
merged_data_with_activities_and_subjects <- merged_data_with_activities %>% mutate(subject = merged_subjects$subject)
merged_data_with_activities_and_subjects$subject
final.melted <- melt(merged_data_with_activities_and_subjects, id = c("subject", "activity"))
final.mean <- dcast(final.melted, subject + activity ~ variable, mean)
library(dplyr)
final.melted <- melt(merged_data_with_activities_and_subjects, id = c("subject", "activity"))
final.mean <- dcast(final.melted, subject + activity ~ variable, mean)
final.melted <- melt(merged_data_with_activities_and_subjects, id = c("subject", "activity"))
final.mean <- dcast(final.melted, subject + activity ~ variable, mean)
library(reshape2)
final.melted <- melt(merged_data_with_activities_and_subjects, id = c("subject", "activity"))
final.mean <- dcast(final.melted, subject + activity ~ variable, mean)
final.mean
head(final.mean)
View(final.mean)
final.melted <- melt(merged_data_with_activities_and_subjects, id = c("subject", "activity"))
final.mean <- dcast(final.melted, subject + activity ~ variable, mean) %>% order_by(subject, activity)
final.melted <- melt(merged_data_with_activities_and_subjects, id = c("subject", "activity"))
final.mean <- dcast(final.melted, subject + activity ~ variable, mean) %>% order_by(subject, activity)
final.melted <- melt(merged_data_with_activities_and_subjects, id = c("subject", "activity"))
final.mean <- dcast(final.melted, subject + activity ~ variable, mean) %>% order_by(subject)
final.melted <- melt(merged_data_with_activities_and_subjects, id = c("subject", "activity"))
final.mean <- dcast(final.melted, subject + activity ~ variable, mean) %>% order_by(subject, call = TRUE)
final.melted <- melt(merged_data_with_activities_and_subjects, id = c("subject", "activity"))
final.mean <- dcast(final.melted, subject + activity ~ variable, mean) %>% order_by(subject, call = FALSE)
final.melted <- melt(merged_data_with_activities_and_subjects, id = c("subject", "activity"))
final.mean <- dcast(final.melted, subject + activity ~ variable, mean)
final.melted <- melt(merged_data_with_activities_and_subjects, id = c("subject", "activity"))
final.mean <- dcast(final.melted, subject + activity ~ variable, mean)
final.mean.ordered <- final.mean %>% order(subject)
final.mean.ordered <- final.mean %>% order("subject")
final.mean.ordered <- final.mean
final.melted <- melt(merged_data_with_activities_and_subjects, id = c("subject", "activity"))
final.mean <- dcast(final.melted, subject + activity ~ variable, mean)
final.mean.ordered <- final.mean %>% arrange(subject, activity)
View(final.mean.ordered)
View(final.mean)
final.mean.ordered <- final.mean %>% arrange(activity, subject)
View(final.mean.ordered)
write.table(final.mean.ordered, "tidy.txt", row.names = FALSE, quote = FALSE)
